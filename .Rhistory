minmaxcap = (maxcap-mincap)/3
caprange1 = mincap + minmaxcap
caprange2 = maxcap + minmaxcap
mindiv = round(min(divyield$Dividend.Yield),2)
maxdiv = round(max(divyield$Dividend.Yield),1)
divrange = (maxdiv-mindiv)/3
divrange = mindiv + divrange
minmaxdiv = (maxdiv-mindiv)/3
divrange = mindiv + minmaxdiv
divrange1 = mindiv + minmaxdiv
divrange2 = divrange1 + minmaxdiv
df2 = data.frame('Div % Yield')
Gauge2 <-  gvisGauge(df2,
options=list(min=mindiv, max=maxdiv, greenFrom=range2,
greenTo=maxdiv, yellowFrom=divrange1, yellowTo=divrange2,
redFrom=mindiv, redTo=divrange1, width=400, height=300))
df2 = data.frame('Div % Yield',8.5)
Gauge2 <-  gvisGauge(df2,
options=list(min=mindiv, max=maxdiv, greenFrom=range2,
greenTo=maxdiv, yellowFrom=divrange1, yellowTo=divrange2,
redFrom=mindiv, redTo=divrange1, width=400, height=300))
plot(Gauge2)
#Creating a Gauge
#pass thru a single DF, the DF has to have one row
Gauge <-  gvisGauge(df,
options=list(min=mincap, max=maxcap, greenFrom=caprange2,
greenTo=maxcap, yellowFrom=caprange1, yellowTo=caprange2,
redFrom=mincap, redTo=caprange1, width=400, height=300))
plot(Gauge)
mindiv = round(min(divyield$Dividend.Yield),2)
maxdiv = round(max(divyield$Dividend.Yield),1)
minmaxdiv = (maxdiv-mindiv)/3
divrange1 = mindiv + minmaxdiv
divrange2 = divrange1 + minmaxdiv
df2 = data.frame('Div % Yield',8.5)
Gauge2 <-  gvisGauge(df2,
options=list(min=mindiv, max=maxdiv, greenFrom=range2,
greenTo=maxdiv, yellowFrom=divrange1, yellowTo=divrange2,
redFrom=mindiv, redTo=divrange1, width=400, height=300))
plot(Gauge2)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
minlev = round(min(debtebitdadf1$Leverage),1)
maxlev = round(max(debtebitdadf1$Leverage),1)
minlev
maxlev
levrange1 = minlev + minmaxlev
minmaxlev = (maxdiv-mindiv)/3
levrange1 = minlev + minmaxlev
levrage2 = levrange1 + minmaxlev
View(debtebitdadf1)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
minPE = round(min(peratio),1)
maxPE = round(max(peratio),1)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
minPE = round(min(peratio$PE),1)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
minPE = round(min(peratio$PE),1)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
minPE = round(min(peratio$PE),1)
maxPE = round(max(peratio$PE),1)
minmaxpe = (maxPE - minPE)/3
perange1 = minPE + minmaxpe
perange2 = perange1 + minmaxpe
Gauge2 <-  gvisGauge(df2,
options=list(min=mindiv, max=maxdiv, greenFrom=range2,
greenTo=maxdiv, yellowFrom=divrange1, yellowTo=divrange2,
redFrom=mindiv, redTo=divrange1, width=400, height=300))
plot(Gauge2)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
minRev = round(min(debtebitdadf1$Rev_Growth))
class(debtebitdadf1$Rev_Growth)
View(debtebitdadf1$Rev_Growth)
additionalfile = additionalfile %>% select(Ticker,Debt = DbtLTQ,Rev_Growth=as.numeric(Sales.ChgTTM))
#The additional data file from Portfolio 123 :
additionalfile = read.csv("additionalmetrics.csv",header = TRUE,stringsAsFactors = FALSE)
additionalfile = additionalfile %>% select(Ticker,Debt = DbtLTQ,Rev_Growth=as.numeric(Sales.ChgTTM))
additionalfile = additionalfile %>% select(Ticker,Debt = DbtLTQ,Rev_Growth=as.numeric(.$Sales.ChgTTM))
head(additionalfile)
str(additionalfile)
#The additional data file from Portfolio 123 :
additionalfile = read.csv("additionalmetrics.csv",header = TRUE,stringsAsFactors = FALSE)
head(additionalfile)
additionalfile = additionalfile %>% select(Ticker,Debt = DbtLTQ,Rev_Growth=as.numeric(Sales.ChgTTM))
additionalfile = additionalfile %>% select(Ticker,Debt = DbtLTQ,Rev_Growth=as.numeric(.$Sales.ChgTTM))
str(additionalfile)
additionalfile$Sales.ChgTTM <- as.numeric(as.character(additionalfile$Sales.ChgTTM))
head(debtebitdadf1,5)
str(debtebitdadf1)
filter(is.na(additionalfile$Sales.ChgTTM)==TRUE)
check1 = afilter(is.na(additionalfile$Sales.ChgTTM)==TRUE)
check1 = filter(is.na(additionalfile$Sales.ChgTTM)==TRUE)
check1 = filter(is.na(additionalfile$Sales.ChgTTM))
check1 = additionalfile %>% filter(complete.cases(.))
nrow(check1)
check1 = additionalfile %>% filter(!complete.cases(.))
nrow(check1)
check1
check2 = newfile %>% filter(!complete.cases(.))
check2
nrow(check2)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
minRev = round(min(debtebitdadf1$Rev_Growth))
#A third file with DEBT and EBITDA :
debtebitdadf <- merge(additionalfile,ebitdadf,by="Ticker")
debtebitdadf1 = debtebitdadf %>%
mutate(Leverage=(Debt*1e6)/EBITDA) %>%
filter(EBITDA>0)
additionalfile = additionalfile %>% select(Ticker,Debt = DbtLTQ,Rev_Growth=as.numeric(.$Sales.ChgTTM))
additionalfile = additionalfile %>% select(Ticker,Debt = DbtLTQ,Rev_Growth=Sales.ChgTTM)
additionalfile$Sales.ChgTTM <- as.numeric(as.character(additionalfile$Sales.ChgTTM))
head(additionalfile)
str(additionalfile)
#A third file with DEBT and EBITDA :
debtebitdadf <- merge(additionalfile,ebitdadf,by="Ticker")
debtebitdadf1 = debtebitdadf %>%
mutate(Leverage=(Debt*1e6)/EBITDA) %>%
filter(EBITDA>0)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
minRev = round(min(debtebitdadf1$Rev_Growth))
maxRev = round(max(debtebitdadf1$Rev_Growth))
minmaxRev = (maxRev-minRev) /3
revrange1 = minRev + minmaxRev
revrange2 = minmaxRev + revrange1
Gauge <-  gvisGauge(df,
options=list(min=mincap, max=maxcap, greenFrom=caprange2,
greenTo=maxcap, yellowFrom=caprange1, yellowTo=caprange2,
redFrom=mincap, redTo=caprange1, width=400, height=300))
plot(Gauge)
#Dividend Yield Gauge
df2 = data.frame('Div % Yield',8.5)
Gauge2 <-  gvisGauge(df2,
options=list(min=mindiv, max=maxdiv, greenFrom=range2,
greenTo=maxdiv, yellowFrom=divrange1, yellowTo=divrange2,
redFrom=mindiv, redTo=divrange1, width=400, height=300))
plot(Gauge2)
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
head(additionalfile)
str(additionalfile)
write.csv('additionalfile.csv')
new = read.csv("additionalfile.csv")
new = read.csv('additionalfile.csv')
getwd
getwd()
additionalfile$Rev_Growth[additionalfile$Ticker=="BHGE"]
additionalfile$Rev_Growth[additionalfile$Ticker=="BHGE"]=0
additionalfile$Rev_Growth[additionalfile$Ticker=="BHGE"]
check1
check1 = additionalfile %>% filter(!complete.cases(.)) #ticker BHGE returns NA for Sales.ChgTTM
check1
write.csv(additionalfile,'additionalmetrics.csv',col.names = TRUE)
newdf1 <- newfile
head(newdf1)
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
newdf1$Name[newdf1$Symbol==input$chosenticker]
newdf1$Name[newdf1$Symbol=="WMT"]
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
View(debtebitdadf)
debtebitdadf1 = debtebitdadf %>%
mutate(Leverage=(Debt*1e6)/EBITDA) %>%
#Calculate Averages
avgdebt = mean(debtebitdadf1$Leverage)  #Note: Excludes negative or zero EBITDA values
library(dplyr)
debtebitdadf1 = debtebitdadf %>%
mutate(Leverage=(Debt*1e6)/EBITDA) %>%
#Calculate Averages
avgdebt = mean(debtebitdadf1$Leverage)  #Note: Excludes negative or zero EBITDA values
debtebitdadf1 = debtebitdadf %>%
mutate(Leverage=(Debt*1e6)/EBITDA)
View(debtebitdadf1)
nrow(debtebitdadf)
nrow(newfile)
head(newfile)
masterdf <- merge(newfile,debtebitdadf1,by.x="Symbol",by.y="Ticker")
View(masterdf)
write.csv(masterfile,file="masterfile.csv")
write.csv(masterdf,file="masterfile.csv")
nrow(masterdf$EBITDA.x==0)
nrow(masterdf)
nrow(masterdf$EBITDA.x>0)
nrow(masterdf[masterdf$EBITDA.x==0])
masterdf$EBITDA.x
df10 = filter(masterdf,masterdf$EBITDA.x>0)
nrow(df10)
check3 = df10 %>% filter(!complete.cases(.))
check3
nrow(check3)
mutate(Beta50 = beta_trailing50(ticker = Symbol,bench = "SPY")
df10 = masterdf %>%
filter(masterdf,masterdf$EBITDA.x>0) %>%
mutate(Beta50 = beta_trailing50(ticker = Symbol,bench = "SPY"))
head(df10)
beta_trailing50("WMT","SPY")
libray(quantmod)
library(quantmod)
beta_trailing50("WMT")
BetaWMT = beta_trailing50("WMT")
library(stocks)
BetaWMT = beta_trailing50("WMT")
BetaWMT
df10 = masterdf %>%
filter(masterdf,masterdf$EBITDA.x>0) %>%
mutate(Beta50 = beta_trailing50(ticker = Symbol,bench = "SPY"))
head(df10,10)
masterframe <- read.csv("masterfile.csv")
head(masterframe,10)
nrow(masterframe)
master1 <- masterframe %>%
filter(EBITDA.x>0)
nrow(masterframe)
nrow(master1)
library(stocks)
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
symbollist
symbollist <- unique(master1$Symbol)
symbollist
head(master1)
head(masterframe,10)
tickermetrics = master1 %>%
filter(Symbol==input$chosenticker) %>%
select(PE=Price.Earnings,Dividend.Yield,Leverage,Rev_Growth)
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
library(shinydashboard)
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
?datatable
library(DT)
runApp('ShinyWork2.R')
tickermetrics
tickermetrics
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
head(debtebitdadf,5)
testdf = debtebitdadf[1:5,]
head(testdf)
head(testdf,10)
testdf = debtebitdadf[1:1,]
testdf1 = transpose(testdf)
testdf1 = t(testdf)
testdf1
test2 = as.table(testdf1)
test2
testdf = as.table(debtebitdadf[1:2,])
testdf = debtebitdadf[1:2,]
testdf1 = t(testdf)
testdf1
test2 = as.table(testdf1)
test2
testdf = debtebitdadf[1:2,]
testdf1 = t(testdf)
testdf1
test2 = as.table(t(testdf))
test2
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
head(master1)
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
master1 <- masterframe %>%
filter(EBITDA.x>0)  #405 rows
head(master1)
test2
testdf1
testdf
round(testdf$Rev_Growth,1)
testdf
runApp('ShinyWork2.R')
master1 <- masterframe %>%
filter(EBITDA.x>0)  #405 rows
#Data Section of global.R
masterframe <- read.csv("masterfile.csv")   #470 rows
master1 <- masterframe %>%
filter(EBITDA.x>0)  #405 rows
runApp('ShinyWork2.R')
head(master1)
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
runApp('ShinyWork2.R')
testdf
for i in testdf{
testdf[betacol] = 2
}
i =1
for i in testdf(
testdf[betacol] = 2
)
for (i in testdf){
testdf[betacol] = 2
}
ncol(testdf)
testdf[1]
for (i in testdf){
testdf[5] = 2
}
testdf
for (i in testdf){
testdf[5] = beta_trailing50(testdf[1])
}
beta_trailing50("WMT")
testdf[1,1]
testdf[2,1]
i =1
a = c()
for (i in testdf){
a[i] = beta_trailing50[testdf[i,1]]
testdf[5] = a[i]
}
a[i] = beta_trailing50(testdf[i,1])
i =1
a = c()
for (i in testdf){
tickers = testdf[i,1]
testdf[5] = beta_trailing50(tickers)
}
testdf[1,1]
tesdf[2,1]
testdf[2,1]
i =1
for (i in testdf){
tickers = testdf[i,1]
print(tickers)
testdf[i,5] = beta_trailing50(tickers)
}
testdf
testdf(2,1)
testdf(2,1)
testdf
testdf[2,1]
lapply(X = testdf,V5=beta_trailing50(testdf$Ticker))
abs = lapply(X = testdf,FUN =beta_trailing50(testdf$Ticker))
abs = lapply(X = testdf$Ticker,FUN =beta_trailing50())
tickers = testdf[i,1]
tickers
testdf
tickers = testdf[1]
tickers
tickers = testdf[1,1]
tickers
tickers = testdf[i,1]
tickers
testdf[i,5] = beta_trailing50(i)
testdf
beta_trailing50("A")
x = testdf$Ticker
x
testdf = debtebitdadf[1:2,]
x = testdf$Ticker
x
y = lapply(x,beta_trailing50())
y = lapply(x,beta_trailing50(x))
y = lapply(x,beta_trailing50()
y = lapply(x,beta_trailing50())
y = beta_trailing50(x)
y
x[2]
betatrailing_50(x[2])
beta_trailing50(x[2])
x[2]
beta_trailing50("AAL")
testdf[i,5] = beta_trailing50(x[i])
y= c()
for (i in x){
y[i] = beta_trailing50(x[i])
}
x
y
print(beta_trailing50(x[i]))
for (i in x){
y[i] = x
}
counter = counter + 1
for (i in x){
counter = counter + 1
}
counter
x = testdf$Ticker
for (i in x){
counter = counter + 1
}
counter
counter = 0
testdf
beta_trailing50("AAL")
for (i in x){
y[i] = beta_trailing50(x[i])
}
y
y= c()
x
for (i in x){
y[i] = beta_trailing50(x[i])
}
y= c()
for (i in 1:length(x)){
y[i] = beta_trailing50(x[i])
}
y
x
runApp('ShinyWork2.R')
betavector
runApp('ShinyWork2.R')
runApp('ShinyWork5.R')
runApp('ShinyWork5.R')
setwd("~/Google_Drive/Data_Science/shinyproject")
runApp('ShinyWork5.R')
